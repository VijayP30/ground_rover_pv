// Generated by gencpp from file rr_openrover_driver_msgs/SmartBatteryStatus.msg
// DO NOT EDIT!


#ifndef RR_OPENROVER_DRIVER_MSGS_MESSAGE_SMARTBATTERYSTATUS_H
#define RR_OPENROVER_DRIVER_MSGS_MESSAGE_SMARTBATTERYSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace rr_openrover_driver_msgs
{
template <class ContainerAllocator>
struct SmartBatteryStatus_
{
  typedef SmartBatteryStatus_<ContainerAllocator> Type;

  SmartBatteryStatus_()
    : header()
    , over_charged_alarm(false)
    , terminate_charge_alarm(false)
    , over_temp_alarm(false)
    , terminate_discharge_alarm(false)
    , remaining_capacity_alarm(false)
    , remaining_time_alarm(false)
    , initialized(false)
    , discharging(false)
    , fully_charged(false)
    , fully_discharged(false)  {
    }
  SmartBatteryStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , over_charged_alarm(false)
    , terminate_charge_alarm(false)
    , over_temp_alarm(false)
    , terminate_discharge_alarm(false)
    , remaining_capacity_alarm(false)
    , remaining_time_alarm(false)
    , initialized(false)
    , discharging(false)
    , fully_charged(false)
    , fully_discharged(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _over_charged_alarm_type;
  _over_charged_alarm_type over_charged_alarm;

   typedef uint8_t _terminate_charge_alarm_type;
  _terminate_charge_alarm_type terminate_charge_alarm;

   typedef uint8_t _over_temp_alarm_type;
  _over_temp_alarm_type over_temp_alarm;

   typedef uint8_t _terminate_discharge_alarm_type;
  _terminate_discharge_alarm_type terminate_discharge_alarm;

   typedef uint8_t _remaining_capacity_alarm_type;
  _remaining_capacity_alarm_type remaining_capacity_alarm;

   typedef uint8_t _remaining_time_alarm_type;
  _remaining_time_alarm_type remaining_time_alarm;

   typedef uint8_t _initialized_type;
  _initialized_type initialized;

   typedef uint8_t _discharging_type;
  _discharging_type discharging;

   typedef uint8_t _fully_charged_type;
  _fully_charged_type fully_charged;

   typedef uint8_t _fully_discharged_type;
  _fully_discharged_type fully_discharged;





  typedef boost::shared_ptr< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SmartBatteryStatus_

typedef ::rr_openrover_driver_msgs::SmartBatteryStatus_<std::allocator<void> > SmartBatteryStatus;

typedef boost::shared_ptr< ::rr_openrover_driver_msgs::SmartBatteryStatus > SmartBatteryStatusPtr;
typedef boost::shared_ptr< ::rr_openrover_driver_msgs::SmartBatteryStatus const> SmartBatteryStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator1> & lhs, const ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.over_charged_alarm == rhs.over_charged_alarm &&
    lhs.terminate_charge_alarm == rhs.terminate_charge_alarm &&
    lhs.over_temp_alarm == rhs.over_temp_alarm &&
    lhs.terminate_discharge_alarm == rhs.terminate_discharge_alarm &&
    lhs.remaining_capacity_alarm == rhs.remaining_capacity_alarm &&
    lhs.remaining_time_alarm == rhs.remaining_time_alarm &&
    lhs.initialized == rhs.initialized &&
    lhs.discharging == rhs.discharging &&
    lhs.fully_charged == rhs.fully_charged &&
    lhs.fully_discharged == rhs.fully_discharged;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator1> & lhs, const ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rr_openrover_driver_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a952a8feedea27cab4667095d349334c";
  }

  static const char* value(const ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa952a8feedea27caULL;
  static const uint64_t static_value2 = 0xb4667095d349334cULL;
};

template<class ContainerAllocator>
struct DataType< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rr_openrover_driver_msgs/SmartBatteryStatus";
  }

  static const char* value(const ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"bool over_charged_alarm\n"
"bool terminate_charge_alarm\n"
"bool over_temp_alarm\n"
"bool terminate_discharge_alarm\n"
"bool remaining_capacity_alarm\n"
"bool remaining_time_alarm\n"
"\n"
"bool initialized\n"
"bool discharging\n"
"bool fully_charged\n"
"bool fully_discharged\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.over_charged_alarm);
      stream.next(m.terminate_charge_alarm);
      stream.next(m.over_temp_alarm);
      stream.next(m.terminate_discharge_alarm);
      stream.next(m.remaining_capacity_alarm);
      stream.next(m.remaining_time_alarm);
      stream.next(m.initialized);
      stream.next(m.discharging);
      stream.next(m.fully_charged);
      stream.next(m.fully_discharged);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SmartBatteryStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rr_openrover_driver_msgs::SmartBatteryStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "over_charged_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.over_charged_alarm);
    s << indent << "terminate_charge_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.terminate_charge_alarm);
    s << indent << "over_temp_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.over_temp_alarm);
    s << indent << "terminate_discharge_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.terminate_discharge_alarm);
    s << indent << "remaining_capacity_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remaining_capacity_alarm);
    s << indent << "remaining_time_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remaining_time_alarm);
    s << indent << "initialized: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.initialized);
    s << indent << "discharging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.discharging);
    s << indent << "fully_charged: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fully_charged);
    s << indent << "fully_discharged: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fully_discharged);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RR_OPENROVER_DRIVER_MSGS_MESSAGE_SMARTBATTERYSTATUS_H
