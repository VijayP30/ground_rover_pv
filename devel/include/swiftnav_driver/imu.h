// Generated by gencpp from file swiftnav_driver/imu.msg
// DO NOT EDIT!


#ifndef SWIFTNAV_DRIVER_MESSAGE_IMU_H
#define SWIFTNAV_DRIVER_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <swiftnav_driver/s16_Vec3.h>
#include <swiftnav_driver/s16_Vec3.h>

namespace swiftnav_driver
{
template <class ContainerAllocator>
struct imu_
{
  typedef imu_<ContainerAllocator> Type;

  imu_()
    : tow(0)
    , acc()
    , gyr()  {
    }
  imu_(const ContainerAllocator& _alloc)
    : tow(0)
    , acc(_alloc)
    , gyr(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _tow_type;
  _tow_type tow;

   typedef  ::swiftnav_driver::s16_Vec3_<ContainerAllocator>  _acc_type;
  _acc_type acc;

   typedef  ::swiftnav_driver::s16_Vec3_<ContainerAllocator>  _gyr_type;
  _gyr_type gyr;





  typedef boost::shared_ptr< ::swiftnav_driver::imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swiftnav_driver::imu_<ContainerAllocator> const> ConstPtr;

}; // struct imu_

typedef ::swiftnav_driver::imu_<std::allocator<void> > imu;

typedef boost::shared_ptr< ::swiftnav_driver::imu > imuPtr;
typedef boost::shared_ptr< ::swiftnav_driver::imu const> imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swiftnav_driver::imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swiftnav_driver::imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swiftnav_driver::imu_<ContainerAllocator1> & lhs, const ::swiftnav_driver::imu_<ContainerAllocator2> & rhs)
{
  return lhs.tow == rhs.tow &&
    lhs.acc == rhs.acc &&
    lhs.gyr == rhs.gyr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swiftnav_driver::imu_<ContainerAllocator1> & lhs, const ::swiftnav_driver::imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swiftnav_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::swiftnav_driver::imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swiftnav_driver::imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swiftnav_driver::imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swiftnav_driver::imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swiftnav_driver::imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swiftnav_driver::imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swiftnav_driver::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2387b2ae5c3f1cac7484571dd69baad";
  }

  static const char* value(const ::swiftnav_driver::imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2387b2ae5c3f1caULL;
  static const uint64_t static_value2 = 0xc7484571dd69baadULL;
};

template<class ContainerAllocator>
struct DataType< ::swiftnav_driver::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swiftnav_driver/imu";
  }

  static const char* value(const ::swiftnav_driver::imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swiftnav_driver::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 tow\n"
"s16_Vec3 acc\n"
"s16_Vec3 gyr\n"
"================================================================================\n"
"MSG: swiftnav_driver/s16_Vec3\n"
"int16 x\n"
"int16 y\n"
"int16 z\n"
;
  }

  static const char* value(const ::swiftnav_driver::imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swiftnav_driver::imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tow);
      stream.next(m.acc);
      stream.next(m.gyr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swiftnav_driver::imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swiftnav_driver::imu_<ContainerAllocator>& v)
  {
    s << indent << "tow: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tow);
    s << indent << "acc: ";
    s << std::endl;
    Printer< ::swiftnav_driver::s16_Vec3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc);
    s << indent << "gyr: ";
    s << std::endl;
    Printer< ::swiftnav_driver::s16_Vec3_<ContainerAllocator> >::stream(s, indent + "  ", v.gyr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWIFTNAV_DRIVER_MESSAGE_IMU_H
