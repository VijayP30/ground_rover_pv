// Generated by gencpp from file swiftnav_driver/imu_aux.msg
// DO NOT EDIT!


#ifndef SWIFTNAV_DRIVER_MESSAGE_IMU_AUX_H
#define SWIFTNAV_DRIVER_MESSAGE_IMU_AUX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swiftnav_driver
{
template <class ContainerAllocator>
struct imu_aux_
{
  typedef imu_aux_<ContainerAllocator> Type;

  imu_aux_()
    : imu_type(0)
    , temp(0)
    , imu_conf(0)  {
    }
  imu_aux_(const ContainerAllocator& _alloc)
    : imu_type(0)
    , temp(0)
    , imu_conf(0)  {
  (void)_alloc;
    }



   typedef uint8_t _imu_type_type;
  _imu_type_type imu_type;

   typedef int16_t _temp_type;
  _temp_type temp;

   typedef uint8_t _imu_conf_type;
  _imu_conf_type imu_conf;





  typedef boost::shared_ptr< ::swiftnav_driver::imu_aux_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swiftnav_driver::imu_aux_<ContainerAllocator> const> ConstPtr;

}; // struct imu_aux_

typedef ::swiftnav_driver::imu_aux_<std::allocator<void> > imu_aux;

typedef boost::shared_ptr< ::swiftnav_driver::imu_aux > imu_auxPtr;
typedef boost::shared_ptr< ::swiftnav_driver::imu_aux const> imu_auxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swiftnav_driver::imu_aux_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swiftnav_driver::imu_aux_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swiftnav_driver::imu_aux_<ContainerAllocator1> & lhs, const ::swiftnav_driver::imu_aux_<ContainerAllocator2> & rhs)
{
  return lhs.imu_type == rhs.imu_type &&
    lhs.temp == rhs.temp &&
    lhs.imu_conf == rhs.imu_conf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swiftnav_driver::imu_aux_<ContainerAllocator1> & lhs, const ::swiftnav_driver::imu_aux_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swiftnav_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::swiftnav_driver::imu_aux_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swiftnav_driver::imu_aux_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swiftnav_driver::imu_aux_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swiftnav_driver::imu_aux_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swiftnav_driver::imu_aux_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swiftnav_driver::imu_aux_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swiftnav_driver::imu_aux_<ContainerAllocator> >
{
  static const char* value()
  {
    return "249814da45ee16df652b831c1a2441a0";
  }

  static const char* value(const ::swiftnav_driver::imu_aux_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x249814da45ee16dfULL;
  static const uint64_t static_value2 = 0x652b831c1a2441a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::swiftnav_driver::imu_aux_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swiftnav_driver/imu_aux";
  }

  static const char* value(const ::swiftnav_driver::imu_aux_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swiftnav_driver::imu_aux_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 imu_type\n"
"int16 temp\n"
"uint8 imu_conf\n"
;
  }

  static const char* value(const ::swiftnav_driver::imu_aux_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swiftnav_driver::imu_aux_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imu_type);
      stream.next(m.temp);
      stream.next(m.imu_conf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_aux_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swiftnav_driver::imu_aux_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swiftnav_driver::imu_aux_<ContainerAllocator>& v)
  {
    s << indent << "imu_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_type);
    s << indent << "temp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.temp);
    s << indent << "imu_conf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_conf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWIFTNAV_DRIVER_MESSAGE_IMU_AUX_H
